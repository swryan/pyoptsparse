name: Test pyoptsparse with SNOPT
on:
  # Run the workflow manually from the Actions tab
  # All jobs are excluded by default, desired jobs must be selected
  workflow_dispatch:
    inputs:
      run_name:
        type: string
        description: 'Name of workflow run as it will appear under Actions tab (optional):'
        required: false
        default: ""
      job_name:
        description: 'Select a job from the matrix to run (default: all jobs)'
        type: choice
        options:
          - ''
          - 'Ubuntu Conda'
          - 'Ubuntu GitHub'
          - 'MacOS Conda'
          - 'MacOS GitHub'
          - 'MacOS ARM GitHub'
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

run-name:  ${{ inputs.run_name }}

permissions: {}

jobs:

  tests:

    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          # test on Ubuntu
          - NAME: Ubuntu Conda
            OS: ubuntu-latest
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'conda-forge'

          - NAME: Ubuntu GitHub
            OS: ubuntu-latest
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'github'

          # test on MacOS
          - NAME: MacOS Conda
            OS: macos-13
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'conda-forge'

          - NAME: MacOS GitHub
            OS: macos-13
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'github'

          # test on MacOS/ARM
          - NAME: MacOS ARM Conda
            OS: macos-14
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'conda-forge'

          - NAME: MacOS ARM GitHub
            OS: macos-14
            PY: '3.12'
            NUMPY: '1.26'
            SCIPY: '1.13'
            PYOPTSPARSE: 'github'

    runs-on: ${{ matrix.OS }}

    name: ${{ matrix.NAME }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Exit if this job was not selected
        if: github.event_name == 'workflow_dispatch' &&  inputs.job_name != '' &&  inputs.job_name != matrix.NAME
        uses: actions/github-script@v7
        with:
          script: core.setFailed('The ${{ matrix.NAME }} job was not included in the run, exiting...');

      - name: Create SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.PY }}
          conda-version: "*"
          channels: conda-forge

      - name: Install dependencies
        if: matrix.OS != 'macos-14'
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y
          conda install cython swig compilers cmake meson openmp -q -y
          conda install mpi4py openmpi-mpicc -q -y
          pip install testflo parameterized

      - name: Install dependencies MacOS 14
        if: matrix.OS == 'macos-14'
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y
          brew install cython swig gcc cmake meson open-mpi mpi4py
          pip install testflo parameterized

      - name: Checkout code
        uses: actions/checkout@v3

      # Enable tmate debugging of manually-triggered workflows if the input option was provided
      #
      # To access the terminal through the web-interface:
      #    1. Click on the web-browser link printed out in this action from the github
      #       workflow terminal
      #    2. Press cntrl + c in the new tab that opens up to reveal the terminal
      #    3. To activate the conda environment run:
      #        $ source $CONDA/etc/profile.d/conda.sh
      #        $ conda activate test
      - name: Setup tmate session
        if: ${{ inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      - name: Build SNOPT
        run: |
          if [[ "${{ secrets.SNOPT_LOCATION }}" ]]; then
            echo "============================================================="
            echo "Building SNOPT"
            echo "============================================================="

            echo "  > Secure copying SNOPT over SSH"
            scp -qr ${{ secrets.SNOPT_LOCATION }} .

            echo "  > Building SNOPT..."
            cd SNOPT
            ./configure
            make
            make check

            echo "============================================================="
            echo "Building Python bindings"
            echo "============================================================="
            echo "  > Copying required files from pySNOPT..."

            PYSNOPT_SOURCE=$HOME/work/pyoptsparse/pyoptsparse/pyoptsparse/pySNOPT/source/
            cp -v $PYSNOPT_SOURCE/*.f src/
            cp -v $PYSNOPT_SOURCE/f2py/snopt.pyf .

            echo "  > Removing problematic files..."
            rm src/snopth.f
            rm src/sn27lu77.f
            rm src/sn27lu90.f

            echo "  > Building Python bindings..."
            python -m numpy.f2py -m snopt -c snopt.pyf src/*.f -L`pwd`/lib -L/lib -lsnopt7

            echo "============================================================="
            echo "Try to import SNOPT"
            echo "============================================================="
            LD_LIBRARY_PATH=/lib/x86_64-linux-gnu/ python -c "import snopt; print(snopt)"
            python -c "import snopt; print(snopt)"

            echo "============================================================="
            echo "Set PYOPTSPARSE_IMPORT_SNOPT_FROM for subsequent steps"
            echo "============================================================="
            export PYOPTSPARSE_IMPORT_SNOPT_FROM=`pwd`
            echo "PYOPTSPARSE_IMPORT_SNOPT_FROM=$PYOPTSPARSE_IMPORT_SNOPT_FROM" >> $GITHUB_ENV

            cd ../..
          else
            echo "============================================================="
            echo "SNOPT source is not available."
            echo "============================================================="
          fi

      - name: Display build log
        if: failure()
        run: |
          for f in $(find /tmp/ -name 'meson-log.txt'); do
            echo "============================================================="
            echo $f
            echo "============================================================="
            cat $f
          done

      - name: Install pyOptSparse
        run: |
          echo "============================================================="
          echo "Install pyoptsparse (from ${{ matrix.PYOPTSPARSE }})"
          echo "============================================================="

          echo "PYOPTSPARSE_IMPORT_SNOPT_FROM: $PYOPTSPARSE_IMPORT_SNOPT_FROM"

          if [[ "${{ matrix.PYOPTSPARSE }}" == "conda-forge" ]]; then
            conda install pyoptsparse
          else
            pip install .
          fi

      - name: Test pyOptSparse
        run: |
          echo "============================================================="
          echo "Run pyoptsparse tests"
          echo "============================================================="
          export OMPI_MCA_mca_base_component_show_load_errors=0

          echo "PYOPTSPARSE_IMPORT_SNOPT_FROM: $PYOPTSPARSE_IMPORT_SNOPT_FROM"

          cd tests
          testflo -v --pre_announce --show_skipped
